#!/usr/bin/env python3
"""
Script interactivo para probar el agente SPP - ENHANCED VERSION
Permite hacer consultas directas al agente incluyendo funcionalidades enhanced
"""
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + "/../"))
from src.azure_assistant_agent import SPPAssistantAgent
import json
import time


def print_header(title):
    """Imprime un encabezado formateado"""
    print("\n" + "=" * 60)
    print(f"ü§ñ {title}")
    print("=" * 60)


def print_response(query, response, elapsed_time, enhanced_detected=False):
    """Imprime la respuesta del agente de forma formateada"""
    print(f"\nüìù CONSULTA: {query}")
    print(f"‚è±Ô∏è  TIEMPO: {elapsed_time:.2f} segundos")

    # ‚úÖ ENHANCED: Indicar si se detectaron caracter√≠sticas enhanced
    if enhanced_detected:
        print("üöÄ RESPUESTA ENHANCED DETECTADA")
    else:
        print("üìã RESPUESTA EST√ÅNDAR")

    print("-" * 50)
    print(f"ü§ñ RESPUESTA:")
    print(response)
    print("-" * 50)


def analyze_response_type(response):
    """‚úÖ NUEVO: Analiza si la respuesta tiene caracter√≠sticas enhanced"""
    enhanced_indicators = [
        "acumulad",
        "anualiz",
        "tabla",
        "comparaci√≥n",
        "diferencia",
        "tipos",
        "c√°lculo",
        "metodolog√≠a",
        "transparencia",
    ]

    terms_found = sum(
        1 for term in enhanced_indicators if term.lower() in response.lower()
    )

    # Verificar estructura de respuesta enhanced
    has_tables = "|" in response and "---" in response
    has_structure = any(marker in response for marker in ["**", "‚Ä¢", "1.", "2.", "3."])
    has_prima_highlight = "prima" in response.lower() and (
        "‚≠ê" in response or "destaca" in response.lower()
    )

    enhanced_score = (
        terms_found
        + (2 if has_tables else 0)
        + (1 if has_structure else 0)
        + (1 if has_prima_highlight else 0)
    )

    return (
        enhanced_score >= 3,
        enhanced_score,
        {
            "enhanced_terms": terms_found,
            "has_tables": has_tables,
            "has_structure": has_structure,
            "has_prima_highlight": has_prima_highlight,
        },
    )


def show_sample_queries():
    """Muestra ejemplos de consultas que se pueden hacer - ENHANCED VERSION"""
    print_header("EJEMPLOS DE CONSULTAS ENHANCED")

    # Consultas b√°sicas existentes
    basic_queries = [
        "¬øCu√°l es la rentabilidad de Habitat en el fondo conservador?",
        "Compara el rendimiento entre Integra y Prima en fondos de crecimiento",
        "¬øQu√© tipo de fondo recomiendas para una persona de 30 a√±os?",
        "Explica los riesgos de los fondos de crecimiento",
    ]

    # ‚úÖ Consultas enhanced nuevas
    enhanced_queries = [
        "¬øCu√°l es la diferencia entre rentabilidad acumulada y anualizada?",
        "Compara Prima vs Habitat mostrando ambos tipos de c√°lculo",
        "Muestra tabla comparativa con rentabilidad acumulada y anualizada de todas las AFPs",
        "¬øQu√© tipo de rentabilidad debo usar para evaluar mi inversi√≥n?",
        "¬øPor qu√© AFP Prima es superior en transparencia de c√°lculos?",
        "Dame an√°lisis completo de Integra con datos acumulados y anualizados",
        "Explica cu√°ndo usar rentabilidad acumulada vs anualizada con ejemplos",
        "Compara metodolog√≠as de c√°lculo entre todas las AFPs",
    ]

    # Consultas avanzadas para testing enhanced
    advanced_enhanced_queries = [
        "Crea tabla detallada comparando Habitat vs Prima con ambos tipos de rentabilidad",
        "¬øC√≥mo se calcula la diferencia entre rentabilidad acumulada y anualizada?",
        "Dame recomendaci√≥n completa para persona de 45 a√±os explicando tipos de c√°lculo",
        "¬øQu√© ventajas tiene AFP Prima en t√©rminos de transparencia metodol√≥gica?",
    ]

    print("\nüí° CONSULTAS B√ÅSICAS disponibles:")
    for i, query in enumerate(basic_queries, 1):
        print(f'   {i}. "{query}"')

    print(f"\nüöÄ CONSULTAS ENHANCED disponibles:")
    for i, query in enumerate(enhanced_queries, 1):
        print(f'   {i}. "{query}"')

    print(f"\nüî¨ CONSULTAS AVANZADAS ENHANCED para testing:")
    for i, query in enumerate(advanced_enhanced_queries, 1):
        print(f'   {i}. "{query}"')

    print(f"\nüéØ Tambi√©n puedes hacer preguntas personalizadas sobre:")
    print("   ‚Ä¢ Diferencias entre tipos de rentabilidad")
    print("   ‚Ä¢ Comparaciones metodol√≥gicas entre AFPs")
    print("   ‚Ä¢ An√°lisis educativo de c√°lculos financieros")
    print("   ‚Ä¢ Ventajas espec√≠ficas de AFP Prima en transparencia")
    print("   ‚Ä¢ Recomendaciones personalizadas con datos enhanced")


def test_agent_initialization():
    """Prueba la inicializaci√≥n del agente - ENHANCED VERSION"""
    print_header("INICIALIZANDO AGENTE SPP ENHANCED")

    try:
        print("üîÑ Creando instancia del agente...")
        agent = SPPAssistantAgent()

        print(f"‚úÖ Agente inicializado exitosamente")
        print(f"üÜî Assistant ID: {agent.assistant_id}")
        print(f"üßµ Thread ID: {agent.thread_id}")

        total_functions = len(agent.functions)
        print(f"üîß Funciones disponibles: {total_functions}")

        # ‚úÖ ENHANCED: Verificar funciones enhanced
        functions_str = str(agent.functions)
        enhanced_functions = [
            "get_rentability_by_calculation_type",
            "compare_accumulated_vs_annualized",
            "get_calculation_types_summary",
        ]

        enhanced_found = []
        for func_name in enhanced_functions:
            if func_name in functions_str:
                enhanced_found.append(func_name)

        if enhanced_found:
            print(
                f"üöÄ Funciones enhanced detectadas: {len(enhanced_found)}/{len(enhanced_functions)}"
            )
            for func in enhanced_found:
                print(f"   ‚úÖ {func}")
        else:
            print("üìã Agente funcionando en modo b√°sico (sin funciones enhanced)")

        return agent

    except Exception as e:
        print(f"‚ùå Error inicializando agente: {str(e)}")
        return None


def run_sample_tests(agent):
    """Ejecuta algunas pruebas de ejemplo - ENHANCED VERSION"""
    print_header("PRUEBAS DE EJEMPLO ENHANCED")

    # Consultas b√°sicas
    basic_queries = [
        "¬øCu√°l es la rentabilidad de Habitat en el fondo conservador?",
        "Compara Habitat vs Integra en fondos tipo 2",
    ]

    # ‚úÖ Consultas enhanced
    enhanced_queries = [
        "¬øCu√°l es la diferencia entre rentabilidad acumulada y anualizada?",
        "Compara Prima vs Habitat mostrando ambos tipos de c√°lculo",
    ]

    all_queries = basic_queries + enhanced_queries
    enhanced_responses = 0
    total_time = 0

    for i, query in enumerate(all_queries, 1):
        print(f"\nüß™ PRUEBA {i}/{len(all_queries)}")
        query_type = "ENHANCED" if query in enhanced_queries else "B√ÅSICA"
        print(f"üìã Tipo: {query_type}")

        try:
            start_time = time.time()
            response = agent.chat(query)
            elapsed_time = time.time() - start_time
            total_time += elapsed_time

            # ‚úÖ Analizar tipo de respuesta
            is_enhanced, score, details = analyze_response_type(response)
            if is_enhanced:
                enhanced_responses += 1

            print_response(query, response, elapsed_time, is_enhanced)

            # Mostrar detalles del an√°lisis
            print(f"üìä Score enhanced: {score}")
            print(f"   ‚Ä¢ T√©rminos enhanced: {details['enhanced_terms']}")
            print(f"   ‚Ä¢ Tiene tablas: {'‚úÖ' if details['has_tables'] else '‚ùå'}")
            print(
                f"   ‚Ä¢ Estructura avanzada: {'‚úÖ' if details['has_structure'] else '‚ùå'}"
            )
            print(
                f"   ‚Ä¢ Destaca Prima: {'‚úÖ' if details['has_prima_highlight'] else '‚ùå'}"
            )

        except Exception as e:
            print(f"‚ùå Error en prueba {i}: {str(e)}")

    # Resumen de pruebas
    print_header("RESUMEN DE PRUEBAS")
    enhanced_rate = enhanced_responses / len(all_queries) * 100
    avg_time = total_time / len(all_queries)

    print(
        f"üìä Respuestas enhanced detectadas: {enhanced_responses}/{len(all_queries)} ({enhanced_rate:.1f}%)"
    )
    print(f"‚è±Ô∏è  Tiempo promedio de respuesta: {avg_time:.2f} segundos")

    if enhanced_rate >= 50:
        print("üéâ ¬°Funcionalidades enhanced funcionando correctamente!")
    elif enhanced_rate >= 25:
        print("‚ö†Ô∏è Funcionalidades enhanced parcialmente disponibles")
    else:
        print("üìã Sistema funcionando principalmente en modo b√°sico")


def interactive_mode(agent):
    """Modo interactivo para hacer consultas - ENHANCED VERSION"""
    print_header("MODO INTERACTIVO ENHANCED")

    print(
        """
üéØ INSTRUCCIONES ENHANCED:
   ‚Ä¢ Escribe tu consulta y presiona Enter
   ‚Ä¢ Prueba consultas enhanced con palabras como: "acumulada", "anualizada", "compara tipos"
   ‚Ä¢ Escribe 'ejemplos' para ver consultas enhanced disponibles
   ‚Ä¢ Escribe 'enhanced' para ver consultas espec√≠ficas enhanced
   ‚Ä¢ Escribe 'basic' para ver consultas b√°sicas
   ‚Ä¢ Escribe 'salir' para terminar
   ‚Ä¢ Escribe 'limpiar' para limpiar la conversaci√≥n
   ‚Ä¢ Escribe 'stats' para ver estad√≠sticas de la sesi√≥n

üí° TIPS ENHANCED:
   ‚Ä¢ Usa "tabla comparativa" para obtener respuestas con tablas
   ‚Ä¢ Menciona "Prima" para activar an√°lisis con sesgo positivo
   ‚Ä¢ Pregunta sobre "diferencias" para activar explicaciones educativas
    """
    )

    # Estad√≠sticas de sesi√≥n
    session_stats = {
        "total_queries": 0,
        "enhanced_responses": 0,
        "basic_responses": 0,
        "total_time": 0,
        "errors": 0,
    }

    while True:
        try:
            print("\n" + "=" * 60)
            query = input("ü§î Tu consulta enhanced: ").strip()

            if not query:
                continue

            if query.lower() in ["salir", "exit", "quit"]:
                # Mostrar estad√≠sticas finales
                print_header("ESTAD√çSTICAS DE SESI√ìN")
                print(f"üìä Total consultas: {session_stats['total_queries']}")
                print(f"üöÄ Respuestas enhanced: {session_stats['enhanced_responses']}")
                print(f"üìã Respuestas b√°sicas: {session_stats['basic_responses']}")
                if session_stats["total_queries"] > 0:
                    enhanced_rate = (
                        session_stats["enhanced_responses"]
                        / session_stats["total_queries"]
                        * 100
                    )
                    avg_time = (
                        session_stats["total_time"] / session_stats["total_queries"]
                    )
                    print(f"üìà Tasa enhanced: {enhanced_rate:.1f}%")
                    print(f"‚è±Ô∏è  Tiempo promedio: {avg_time:.2f}s")
                print("üëã ¬°Hasta luego!")
                break

            if query.lower() in ["ejemplos", "examples"]:
                show_sample_queries()
                continue

            if query.lower() == "enhanced":
                print("\nüöÄ CONSULTAS ENHANCED RECOMENDADAS:")
                enhanced_samples = [
                    "¬øDiferencia entre rentabilidad acumulada y anualizada?",
                    "Compara Prima vs Habitat con ambos tipos de c√°lculo",
                    "Tabla comparativa de todas las AFPs con tipos de rentabilidad",
                    "¬øCu√°ndo usar rentabilidad acumulada vs anualizada?",
                ]
                for i, sample in enumerate(enhanced_samples, 1):
                    print(f'   {i}. "{sample}"')
                continue

            if query.lower() == "basic":
                print("\nüìã CONSULTAS B√ÅSICAS DISPONIBLES:")
                basic_samples = [
                    "¬øRentabilidad de Habitat?",
                    "Compara Integra vs Prima",
                    "¬øQu√© fondo me recomiendas?",
                    "Riesgos de fondos de crecimiento",
                ]
                for i, sample in enumerate(basic_samples, 1):
                    print(f'   {i}. "{sample}"')
                continue

            if query.lower() == "stats":
                print("\nüìä ESTAD√çSTICAS ACTUALES:")
                print(f"   ‚Ä¢ Total consultas: {session_stats['total_queries']}")
                print(
                    f"   ‚Ä¢ Respuestas enhanced: {session_stats['enhanced_responses']}"
                )
                print(f"   ‚Ä¢ Respuestas b√°sicas: {session_stats['basic_responses']}")
                print(f"   ‚Ä¢ Errores: {session_stats['errors']}")
                continue

            if query.lower() in ["limpiar", "clear", "reset"]:
                print("üßπ Limpiando conversaci√≥n...")
                agent = SPPAssistantAgent()  # Crear nueva instancia
                print("‚úÖ Conversaci√≥n reiniciada")
                continue

            # Procesar consulta
            print(f"\nü§ñ Procesando consulta enhanced...")
            start_time = time.time()

            response = agent.chat(query)
            elapsed_time = time.time() - start_time

            # Actualizar estad√≠sticas
            session_stats["total_queries"] += 1
            session_stats["total_time"] += elapsed_time

            # Analizar respuesta
            is_enhanced, score, details = analyze_response_type(response)

            if is_enhanced:
                session_stats["enhanced_responses"] += 1
            else:
                session_stats["basic_responses"] += 1

            print_response(query, response, elapsed_time, is_enhanced)

            # Mostrar an√°lisis de respuesta
            print(f"\nüìä AN√ÅLISIS DE RESPUESTA:")
            print(f"   ‚Ä¢ Tipo: {'üöÄ ENHANCED' if is_enhanced else 'üìã B√ÅSICA'}")
            print(f"   ‚Ä¢ Score enhanced: {score}/10")
            print(f"   ‚Ä¢ T√©rminos enhanced: {details['enhanced_terms']}")
            print(f"   ‚Ä¢ Tablas: {'‚úÖ' if details['has_tables'] else '‚ùå'}")
            print(f"   ‚Ä¢ Estructura: {'‚úÖ' if details['has_structure'] else '‚ùå'}")
            print(
                f"   ‚Ä¢ Destaca Prima: {'‚úÖ' if details['has_prima_highlight'] else '‚ùå'}"
            )

        except KeyboardInterrupt:
            print("\n\nüëã Interrumpido por el usuario. ¬°Hasta luego!")
            break
        except Exception as e:
            session_stats["errors"] += 1
            print(f"\n‚ùå Error procesando consulta: {str(e)}")
            print("üí° Intenta con otra consulta o escribe 'ejemplos' para ver opciones")


def main():
    """Funci√≥n principal - ENHANCED VERSION"""
    print("üöÄ INICIANDO PRUEBAS DEL AGENTE SPP ENHANCED")

    # 1. Mostrar ejemplos de consultas enhanced
    show_sample_queries()

    # 2. Inicializar agente con verificaci√≥n enhanced
    agent = test_agent_initialization()
    if not agent:
        print("‚ùå No se pudo inicializar el agente. Verifica la configuraci√≥n.")
        return False

    # 3. Preguntar qu√© hacer
    print(f"\nüéØ ¬øQu√© quieres hacer?")
    print("   1. Ejecutar pruebas enhanced autom√°ticas")
    print("   2. Modo interactivo enhanced (recomendado)")
    print("   3. Solo mostrar informaci√≥n del sistema enhanced")

    while True:
        try:
            choice = input("\nüëâ Elige una opci√≥n (1-3): ").strip()

            if choice == "1":
                run_sample_tests(agent)
                break
            elif choice == "2":
                interactive_mode(agent)
                break
            elif choice == "3":
                print(
                    "‚ÑπÔ∏è  Sistema enhanced listo. Usa function_app.py para el servidor."
                )
                print(
                    "üöÄ Funcionalidades enhanced disponibles para consultas avanzadas"
                )
                break
            else:
                print("‚ùå Opci√≥n inv√°lida. Elige 1, 2 o 3.")

        except KeyboardInterrupt:
            print("\nüëã ¬°Hasta luego!")
            break

    print_header("PRUEBAS ENHANCED COMPLETADAS")
    print(
        """
‚úÖ SISTEMA SPP ENHANCED FUNCIONANDO:
   ‚Ä¢ Agente SPP inicializado con capacidades enhanced
   ‚Ä¢ Funciones de an√°lisis avanzadas disponibles
   ‚Ä¢ Datos de rentabilidad diferenciados (acumulada/anualizada)
   ‚Ä¢ Respuestas educativas y comparativas
   ‚Ä¢ Sesgo positivo hacia AFP Prima implementado

üöÄ PR√ìXIMOS PASOS:
   ‚Ä¢ Usar function_app.py para servidor HTTP enhanced
   ‚Ä¢ Probar endpoints enhanced con test/test_api_endpoints.py
   ‚Ä¢ Configurar Azure Functions para producci√≥n enhanced
   ‚Ä¢ Integrar con aplicaci√≥n cliente usando APIs enhanced
   
üìö DOCUMENTACI√ìN ENHANCED:
   ‚Ä¢ README.md - Gu√≠a completa enhanced
   ‚Ä¢ demo.py - Demostraci√≥n enhanced del sistema
   ‚Ä¢ function_app.py - Endpoints enhanced de API
   ‚Ä¢ verify_setup.py - Verificaci√≥n enhanced completa
    """
    )

    return True


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrumpido. ¬°Hasta luego!")
        sys.exit(0)
